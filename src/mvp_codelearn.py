# -*- coding: utf-8 -*-
"""MVP_codelearn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YvCJ6nxBpeGkbX_1tu5pX8CSD1fBOrU8

## Part (a)
Import the data and save the data into a variable `X` and the targets into a variable `Y`.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import suitable packages, load the dataset, and save data and targets into variables X and Y
# import packages
##TODO##
import numpy as np
import matplotlib.pyplot as plt
import json
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
# %matplotlib inline

"""Load the data

"""

#path1 = "/content/drive/MyDrive/MVP/MVPdata1.json"
path2 = "/content/drive/MyDrive/MVP/Airbus_Part_numbersML.csv"
from google.colab import drive
drive.mount('/content/drive')

# df_part = pd.read_csv(path2)
# df_part = pd.read_csv(path2, header=None, names=['Column1'])
# df_part[['Code', 'Status']] = df_part['Column1'].str.split(',', expand=True)
# df_part.drop('Column1', axis=1, inplace=True)

df_part = pd.read_csv(path2)
print(df_part)
#print(df_part.head())
print(df_part.iloc[:,0])
print(df_part.iloc[:,1])
print(df_part.shape)

# path3 = "/content/drive/MyDrive/MVP/Airbus_Part_numbersML.csv"  #save file
# df_part.to_csv(path3, index=False)

"""Encode the strings using Label Encoder for unique code."""

# encoder = LabelEncoder()
# df_part['encoded_code'] = encoder.fit_transform(df_part['Code'])  #additional column created for encoded code
# print(df_part)

X = df_part[['encoded_code']] #double brackets to ensure we have 1 column else the ML model wasnt accepting
y = df_part[['Status']]
# print(y.shape)
# print(y)
# print(X.shape)
# print(X)

"""## Part (b)

Splt data 80:20
"""

# Import the package train_test_split from sklearn.model_selection.
# Split the dataset into Xtr, Xtest, Ytr, Ytest. Xtest and Ytest will form your held-out
# test set. You will later split Xtr and Ytr into training and validation sets.
from sklearn.model_selection import train_test_split

# The function returns splits of each array passed in.
# The proportion to be used as the training set is given by test_size
Xtr, Xtest, ytr, ytest = train_test_split (X, y, test_size=0.2,random_state=10)

#print(Xtr.shape, Xtest.shape)
#print(ytr.shape, ytest.shape)
# print(ytr[0:2])
# print(Xtr[3])
# print(np.linalg.norm(Xtr[3] - Xtr[5]))
#print(len(Xtr))
print(Xtr,Xtest)
#print(ytr,ytest)
print(Xtr.shape,Xtest.shape)

"""## Part (c)
Use library, and test against training data.
"""

from sklearn.neighbors import KNeighborsClassifier   # Import KNeighborClassifier
knn = KNeighborsClassifier (n_neighbors=5)     # Instantiate the classifier with 3 neighbors
knn.fit(Xtr,ytr)        # Fit the classifier on the training data
ypred_knn_tr = knn.predict(Xtr)        #Make a prediction on the training data
print(Xtr)
print(ypred_knn_tr)
#print(ypred_knnP.shape,type(ypred_knn))

"""Check whether your predictions are the same as the predictions from `KNeighborsClassifier`."""

print("acc_knn_tr =", accuracy_score(ypred_knn_tr, ytr))  #accuracy score

ypred_knn_tst = knn.predict(Xtest) #prediction against test data
print(ypred_knn_tst)
print(Xtest.iloc[0:7])
print("acc_knn_test =", accuracy_score(ypred_knn_tst, ytest))  #accuracy score

print(knn.classes_)
print(knn.feature_names_in_)
print(knn.n_features_in_)
print(knn.n_samples_fit_)

"""Decode values"""

code_to_find = 'V52895437068-BS99'
encoded = df_part.loc[df_part['Code'] == code_to_find, 'encoded_code'].values[0]

print(f"The encoded code for {code_to_find} is {encoded}")

new_class = pd.DataFrame({'encoded_code': [42, 316, 320]})
print(new_class)

ypred_knn_new = knn.predict(new_class)
print(ypred_knn_new)

